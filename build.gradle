buildscript {
	repositories {
		mavenRepo urls: "http://gradle.artifactoryonline.com/gradle/plugins"
		mavenCentral()
	}
	dependencies {
		classpath "org.gradle.plugins:gradle-idea-plugin:0.2",
		          "org.apache.maven.wagon:wagon-webdav-jackrabbit:1.0-beta-6"
	}
}

allprojects {
	
	buildscript {
		repositories {
			mavenRepo (name: "Alkemist's GitHub", urls: "http://cloud.github.com/downloads/alkemist") {
				pattern = "[organisation]/[module]-[revision].[ext]"
			}
		}
	}
	
	grailsVersion = "1.3.7"
	seleniumVersion = "2.0b3"
	groovyVersion = "1.7.10"
	spockVersion = "0.6-groovy-1.7-SNAPSHOT"
	
	spockDependency = "org.spockframework:spock-core:$spockVersion"

	seleniumDependency = "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
	firefoxDriverDependency = "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
	htmlUnitDriverDependency = "org.seleniumhq.selenium:selenium-htmlunit-driver:$seleniumVersion"

	jettyDependency = "org.mortbay.jetty:jetty:6.1.21"

	groovyDependency = "org.codehaus.groovy:groovy-all:$groovyVersion"
	
	repositories {
		mavenCentral()
		mavenRepo name: "spock-snapshots", urls: ["http://m2repo.spockframework.org/snapshots"]
		mavenRepo name: "java.net", urls: ["http://download.java.net/maven/2"]
	}
	
	groovyModules = [
		":module:geb-core", ":module:test-utils", 
		":module:geb-spock", ":module:geb-junit3", ":module:geb-junit4",
		":module:geb-easyb", ":module:geb-testng"
	]

	publishedModules = [
		":module:geb-core", ":module:geb-spock", 
		":module:geb-junit3", ":module:geb-junit4", ":module:geb-easyb",
		":module:geb-testng", ":doc:manual"
	]
}

subprojects {
	version = '0.6-SNAPSHOT'
	group = 'org.codehaus.geb'
	
	isSnapshot = version.endsWith("-SNAPSHOT")
	
	// apply plugin: "org.gradle.idea"
		
	if (project.path in groovyModules) {
		apply plugin: "groovy"
		
		if (project.path in publishedModules) {
			project.apply plugin: 'maven'
		}
		
		if (project.path != ":test-utils") {
			apply from: "file:${rootDir}/clover.gradle"
		}
		
		configurations {
			meta
		}
		
		dependencies {
			groovy groovyDependency
		}
		
		task sourcesJar(type: Jar, dependsOn: classes) { 
			classifier = 'sources' 
			from sourceSets.main.allSource
		} 

		task javadocJar(type: Jar, dependsOn: javadoc) { 
			classifier = 'javadoc' 
			from javadoc.destinationDir 
		} 

		artifacts {
			meta javadocJar
			meta sourcesJar
		}
		
		compileGroovy.options.fork = false
		compileTestGroovy.options.fork = false
		
		if (project.hasProperty('t')) {
			test.doFirst {
				test.include "**/${t}*.class"
			}
		}
		
		test.ignoreFailures = true

		sourceCompatibility = 1.5
		targetCompatibility = 1.5
		
		configurations {
			compile.transitive = true
			testCompile.transitive = true
		}
		
		if (project.hasProperty("driver")) {
			test {
				systemProperties['geb.driver'] = project.driver
			}
		}
		
		task listCompile(dependsOn: configurations.compile) << {
			println "compile classpath = ${configurations.compile.resolve().collect {File file -> file.name}.sort()}"
		}

		task listRuntime(dependsOn: configurations.runtime) << {
			println "runtime classpath = ${configurations.runtime.resolve().collect {File file -> file.name}.sort()}"
		}
	}
	
	afterEvaluate { project ->
		if (project.path in publishedModules) {
			project.apply plugin: 'sign'

			if (project.path in groovyModules) {
				project.uploadArchives.dependsOn sourcesJar, javadocJar
			}
			
			project.configurations {
				deployerJars
			}

			project.dependencies {
				deployerJars "org.apache.maven.wagon:wagon-http-lightweight:1.0-beta-6"
			}

			project.poms = [project.install.repositories.mavenInstaller.pom]

			if (project.hasProperty('codehausUsername') && project.hasProperty('codehausPassword')) {
				uploadArchives {
					project.deployer = repositories.mavenDeployer {
						beforeDeployment { MavenDeployment deployment ->
							if (project.path in groovyModules) {
								["sources", "javadoc"].each { type ->
									deployment.addArtifact configurations.meta.artifacts.find { it.classifier == type }
								}
							}
						}
						uniqueVersion = false
						configuration = configurations.deployerJars
						repository(url: "https://nexus.codehaus.org/service/local/staging/deploy/maven2/") {
							authentication(userName: codehausUsername, password: codehausPassword)
						}
						snapshotRepository(url: "https://nexus.codehaus.org/content/repositories/snapshots/") {
							authentication(userName: codehausUsername, password: codehausPassword)
						}
						pom.project {
							name "Geb"
							description "Geb (pronounced with a soft “G” like “Jeb”) is a browser automation solution for the Groovy programming language. It combines the browser driving features of WebDriver (and therefore can work with Internet Explorer, FireFox, Chrome and HTMLUnit) with a jQuery inspired content navigation/inspection API and the expressiveness of Groovy."
							url "http://geb.codehaus.org"
							inceptionYear "2010"
							licenses {
								license {
									name 'The Apache Software License, Version 2.0'
									url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
									distribution 'repo'
								}
							}
							scm {
								url "https://github.com/geb/geb/"
							}
							developers {
								developer {
									id "ldaley"
									name "Luke Daley"
									roles {
										role "Lead"
										role "Founder"
									}
								}
								developer {
									id "robfletcher"
									name "Rob Fletcher"
									roles {
										role "Founder"
									}
								}
							}

						}
					}
					project.poms << project.deployer.pom 
				}
			}
			
			if (project.hasProperty('modifyPom')) {
				project.poms*.whenConfigured(project.modifyPom) 
			}

			// Remove test deps from all poms
			project.poms*.whenConfigured { pom ->
				pom.dependencies.removeAll(pom.dependencies.findAll { it.scope == "test" })
			}
		}
	}
}

configurations {
	build
}

dependencies {
	build "com.cenqua.clover:clover:3.0.2"
	build "org.apache.ant:ant-junit:1.8.1@jar"
	build "org.apache.ant:ant-nodeps:1.8.1@jar"
}

task test(dependsOn: getTasksByName("test", true)) << {
	def reportsDir = "${buildDir}/reports"
	
	// Aggregate the test results
	ant.taskdef(
		name: 'junitreport2', 
		classname: "org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator",
		classpath: configurations.build.asPath
	)
	
	def testReportsDir = new File("${reportsDir}/tests")
	if (testReportsDir.exists()) {
		testReportsDir.deleteDir()
	}
	testReportsDir.mkdirs()
	
	ant.junitreport2(todir: testReportsDir) {
		subprojects.each {
			def testResultsDir = "${it.buildDir}/test-results"
			if (new File(testResultsDir).exists()) {
				fileset(dir: testResultsDir) {
					include(name: "TEST-*.xml")
				}
			}
		}
		report(todir: testReportsDir)
	}
	
	// Aggregate the coverage results
	if (project.hasProperty("withClover")) {
		def db = "clover/clover.db"
		def mergedDb = "${buildDir}/${db}"
		def cloverReportsDir = "${reportsDir}/clover"
		ant.taskdef(resource: "cloverlib.xml", classpath: configurations.build.asPath)
		ant."clover-merge"(initstring: mergedDb) {
			subprojects.each {
				def projectCloverDb = "${it.buildDir}/${db}"
				if (new File(projectCloverDb).exists()) {
					cloverdb(initstring: projectCloverDb)
				}
			}
		}
		ant."clover-report"(initstring: mergedDb) {
			current(outfile:"${cloverReportsDir}/clover.xml")
		}
		ant."clover-html-report"(initstring: mergedDb, outdir:"${cloverReportsDir}/html")
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.0-milestone-3'
}
