import org.apache.ivy.plugins.resolver.URLResolver
import org.apache.tools.ant.filters.*

apply plugin: "groovy"
apply plugin: "gae"

buildscript {
	gitHub = {
		def resolver = new URLResolver()

		resolver.with {
			name = 'GitHub'
			addArtifactPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]'
		}

		resolver
	}
    
	repositories {
		add gitHub()
	}

	dependencies {
		classpath 'bmuschko:gradle-gae-plugin:0.5.1'
		classpath 'bmuschko:gradle-gaelyk-plugin:0.1'
	}
}

repositories {
	add gitHub()
}

// Also needed to be updated in buildscript block
appEngineVersion = "1.5.1"

dependencies {
	groovy "org.codehaus.groovy:groovy-all:1.8.0"
	
	compile "com.google.appengine:appengine-api-1.0-sdk:$appEngineVersion",
	        "com.google.appengine:appengine-api-labs:$appEngineVersion",
	        "glaforge:gaelyk:0.7"
	
	compile "oauth.signpost:signpost-core:1.2.1.1"
	gaeSdk "com.google.appengine:appengine-java-sdk:$appEngineVersion"
}

// The version of manual to put under the “current” label
stableVersion = "0.6.1"

// The old versions of Geb we are including manuals for
oldManualVersions = ["0.6.0.RC1", "0.6.0"]

def manualDependency = { "org.codehaus.geb:geb-manual:$it@zip" }
configurations {
	snapshotManual
	currentManual
	
	oldManualVersions.each {
		delegate."manual-$it"
	}
}

repositories {
	mavenRepo url: "https://nexus.codehaus.org/content/repositories/snapshots"
	mavenRepo url: "https://nexus.codehaus.org/content/repositories/releases"
}

dependencies {
	snapshotManual project(path: ":doc:manual", configuration: "archives")
	currentManual manualDependency(stableVersion)
	
	oldManualVersions.each {
		delegate."manual-$it" manualDependency(it)
	}
}

def findManualArtifacts = { configuration ->
	configuration.resolvedConfiguration.resolvedArtifacts.findAll {
		it.name == "geb-manual" && it.type == "zip"
	}.unique {
		// sometimes there are two of the same artifact in the configuration
		it.name
	}
}

def findManualArtifact = { configuration ->
	def artifacts = findManualArtifacts(configuration)
	def size = artifacts.size()
	assert size == 1 : "$configuration should have one manual artifact, not $size"
	artifacts.toList().first()
}

def explodeManual = { manualArtifactFile, label ->
	copy {
		from zipTree(manualArtifactFile)
		into "build/manual/manual/$label"
	}
}

gaeDownloadSdk.doLast {
	copy {
		def sdk = configurations.gaeSdk.singleFile
		def dest = file("build/exploded-gae-sdk/$sdk.name" - ".zip")
		from zipTree(sdk)
		into dest
		
		System.setProperty("appengine.sdk.root", dest.canonicalPath)
	}
}

task cleanManuals(type: Delete) {
	delete "$buildDir/manual"
}

task includeSnapshotManual(dependsOn: [configurations.snapshotManual, cleanManuals]) {
	doLast {
		explodeManual(findManualArtifact(configurations.snapshotManual).file, "snapshot")
	}
}

task includeCurrentManual(dependsOn: [configurations.currentManual, cleanManuals]) {
	doLast {
		explodeManual(findManualArtifact(configurations.currentManual).file, "current")
	}
}

def allVersionConfigurations = [configurations.currentManual] + oldManualVersions.collect { configurations["manual-$it"] } 
task includeVersionManuals(dependsOn: allVersionConfigurations + [cleanManuals]) {
	allVersionConfigurations.each { manualConfiguration ->
		doLast {
			def artifact = findManualArtifact(manualConfiguration)
			explodeManual(artifact, artifact.resolvedDependency.moduleVersion)
		}
	}
}

task includeManuals(dependsOn: [includeSnapshotManual, includeCurrentManual, includeVersionManuals])

task filter(type: Copy) {
	def siteVersion = project.hasProperty("liveSite") ? stableVersion.replace(".", "-") : "snapshot" 
	def properties = [version: siteVersion]

	["consumerKey", "consumerSecret", "accessToken", "secretToken"].each {
		def propertyName = "geb.twitter.$it"
		properties[propertyName] = project.hasProperty(propertyName) ? project.getProperty(propertyName) : ""
	}

	inputs.properties(properties)
	filter(ReplaceTokens, tokens: properties)
	from "src/main/webapp-filtered"
	into "build/exploded-war-filtered"
}

war {
	dependsOn filter, includeManuals
	from filter.destinationDir
	from "build/manual"
}

gae {
	downloadSdk = true
	appcfg {
		if (project.hasProperty('gaeEmail')) {
			email = gaeEmail
		}
	}
}
