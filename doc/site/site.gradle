/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
plugins {
    id "geb.groovy-module"
    id "geb.manuals"
    id("geb.spock-2-module")
}
repositories {
    mavenCentral()
}

configurations {
    currentManual
    distribution
}

manuals {
    include(
        "2.0", "2.1", "2.2", "2.3", "2.3.1", "3.0", "3.0.1", "3.1", "3.2", "3.3", "3.4", "3.4.1",
        "4.0", "4.1", "5.0", "5.1", "6.0", "7.0"
    )
    currentManual.from(configurations.currentManual)
    indexTemplate.set(file("templates/main.html"))
}

dependencies {
    testImplementation libs.spockCoreGroovy25
    testImplementation libs.jsoup
    testImplementation libs.gebSpockGroovy25
    testImplementation libs.htmlUnitDriver
    currentManual project(path: ":doc:manual", configuration: "manual")
    testImplementation(platform(libs.micronaut.bom))
    testCompileOnly(libs.micronaut.inject.groovy)
    testImplementation(libs.micronaut.runtime.groovy)
    testImplementation(libs.micronaut.http.client)
    testImplementation(libs.micronaut.http.server.netty)
    testImplementation(libs.logback.classic)
}

tasks.register("generateResources", Sync) {
    group = "website"
    description = "copy the generated manuals from build/manuls src/main/resource/public/manuals"

    from(tasks.named("gatherManuals")) {
        into 'public/manual'
    }
    from(tasks.named("generateIndex"))
    into 'src/main/resources'
}

tasks.generateIndex {
    group = "website"
    description = "generate an index.html with the template templates/main.html and the manuals configuration extension"
    inputs.files(file("templates/main.html"))
}

tasks.register("placeIndex", Copy) {
    group = "website"
    description = "move the generated src/main/resources/index.html to src/main/resources/public/index.html and deletes it from src/main/resources"
    from 'src/main/resources/index.html'
    into 'src/main/resources/public'
    dependsOn("generateResources", "generateIndex")
    doLast {
        delete 'src/main/resources/index.html'
    }
}

tasks.register("copyPublicResources", Copy) {
    group = "website"
    from 'public'
    into 'src/main/resources/public'
    mustRunAfter("generateResources", "generateIndex")
}

tasks.register("generatePublic") {
    group = "website"
    dependsOn("copyPublicResources", "generateResources", "placeIndex")
}
processResources.dependsOn("generatePublic")
test.dependsOn("generatePublic")
rat.dependsOn("generatePublic")

tasks.register("deleteResources", Delete) {
    group = "website"
    delete 'src/main/resources'
}
clean.dependsOn("deleteResources")

tasks.register("generateDist", Copy) {
    description = "copy the public static website to build/dist"
    group = "website"
    from 'src/main/resources/public'
    into 'build/dist'
    dependsOn("generatePublic")
}
build.dependsOn("generatePublic")
build.dependsOn("generateDist")