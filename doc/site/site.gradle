/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

plugins {
    id "geb.groovy-module"
    id "geb.manuals"
    alias(libs.plugins.node)
    alias(libs.plugins.ratpackGroovy)
}

repositories {
    mavenCentral()
    maven { url = "https://repository.apache.org/content/repositories/snapshots"
        mavenContent {
            snapshotsOnly()
        }
    }
}

configurations {
    currentManual

    distribution
}

manuals {
    include(
        "2.0", "2.1", "2.2", "2.3", "2.3.1", "3.0", "3.0.1", "3.1", "3.2", "3.3", "3.4", "3.4.1",
        "4.0", "4.1", "5.0", "5.1", "6.0", "7.0"
    )
    currentManual.from(configurations.currentManual)
}

dependencies {
    groovy libs.groovy25

    testImplementation libs.spockCoreGroovy25
    testImplementation libs.jsoup
    testImplementation libs.gebSpockGroovy25
    testImplementation libs.htmlUnitDriver

    currentManual project(path: ":doc:manual", configuration: "manual")

    codenarc libs.codenarc, {
        exclude module: "GMetrics"
        exclude group: "org.codehaus.groovy"
    }
}

node {
    version = '19.2.0'
    download = true
    nodeProjectDir = file("src/npm")
}

def generateResourcesTask = tasks.register("generateResources", Sync) {
    from(tasks.named("gatherManuals")) {
        into 'public/manual'
    }
    from tasks.named("generateConfigProperties")

    into 'src/main/generatedResources'
}

sourceSets.main.resources.srcDirs generateResourcesTask, 'src/semantic'

def pnpmInstallTask = tasks.named("pnpmInstall") {
    args.add("--frozen-lockfile")
}

tasks.named("processResources") {
    from(pnpmInstallTask) {
        includeEmptyDirs = false
        include 'jquery/dist/jquery.min.js'
        eachFile {
            it.relativePath = new RelativePath(true, 'public', 'js', it.sourceName)
        }
    }
    from(pnpmInstallTask) {
        includeEmptyDirs = false
        include '@browser-logos/chrome/chrome_512x512.png'
        include '@browser-logos/safari/safari_512x512.png'
        include '@browser-logos/edge/edge_512x512.png'
        include '@browser-logos/firefox/firefox_512x512.png'
        eachFile {
            it.relativePath = new RelativePath(true, 'public', 'images', it.sourceName)
        }
    }
}

tasks.register("publish", Exec) {
    commandLine 'git push git@heroku.com:gebish.git master'.tokenize(' ')
}

def distributionTask = tasks.register("distribution", Sync) {
    with distributions.main.contents
    into project.layout.buildDirectory.dir('distribution')
}

artifacts {
    distribution(distributionTask.map { it.outputs.files.singleFile }) {
        builtBy distributionTask
    }
}

if (project.gradle.startParameter.continuous) {
    run {
        flattenClassloaders = true
    }
}

idea {
    module {
        excludeDirs += file('src/npm/node_modules')
    }
}


tasks.withType(Test).configureEach {
    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')
}

rat.mustRunAfter(pnpmInstall)